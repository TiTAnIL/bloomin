{"ast":null,"code":"function on(eventName, listener) {\n  const callListener = _ref => {\n    let {\n      detail\n    } = _ref;\n    listener(detail);\n  };\n  window.addEventListener(eventName, callListener);\n  return () => {\n    window.removeEventListener(eventName, callListener);\n  };\n}\nfunction emit(eventName, data) {\n  window.dispatchEvent(new CustomEvent(eventName, {\n    detail: data\n  }));\n}\nexport const eventBusService = {\n  on,\n  emit\n};\nexport function showUserMsg(txt) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  eventBusService.emit('show-user-msg', {\n    txt,\n    type\n  });\n}\nexport function showSuccessMsg(txt) {\n  showUserMsg(txt, 'success');\n}\nexport function showErrorMsg(txt) {\n  showUserMsg(txt, 'danger');\n}\nwindow.myBus = eventBusService;\nwindow.showUserMsg = showUserMsg;\n\n// eventBusService.on('baba', (x)=>console.log('Hi Baba', x))\n// eventBusService.on('baba', (x)=>console.log('Hello Baba Ji', x))\n// eventBusService.emit('baba', [5, 8, 11])\n// setTimeout(()=>{\n//     eventBusService.emit('baba', 17)\n// }, 2000)\n\n/* Listening Component...\r\n    import {eventBusService} from 'path...event-bus-service'\r\n    eventBusService.on('some-event', (dataFromEvent) => {\r\n    do something with dataFromEvent\r\n    })\r\n\r\n   Receiving Component...\r\n    eventBusService.emit('some-event', data)\r\n*/","map":{"version":3,"names":["on","eventName","listener","callListener","detail","window","addEventListener","removeEventListener","emit","data","dispatchEvent","CustomEvent","eventBusService","showUserMsg","txt","type","showSuccessMsg","showErrorMsg","myBus"],"sources":["C:/bloomin/bloomin/src/services/event-bus.service.js"],"sourcesContent":["function on(eventName, listener) {\r\n\r\n    const callListener = ({ detail }) => {\r\n        listener(detail);\r\n    };\r\n\r\n    window.addEventListener(eventName, callListener);\r\n\r\n    return () => {\r\n        window.removeEventListener(eventName, callListener);\r\n    };\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    window.dispatchEvent(new CustomEvent(eventName, { detail: data }));\r\n}\r\n\r\nexport const eventBusService = { on, emit }\r\n\r\nexport function showUserMsg(txt, type = '') {\r\n    eventBusService.emit('show-user-msg', { txt, type })\r\n}\r\nexport function showSuccessMsg(txt) {\r\n    showUserMsg(txt, 'success')\r\n}\r\nexport function showErrorMsg(txt) {\r\n    showUserMsg(txt, 'danger')\r\n}\r\n\r\n\r\n\r\nwindow.myBus = eventBusService;\r\nwindow.showUserMsg = showUserMsg;\r\n\r\n// eventBusService.on('baba', (x)=>console.log('Hi Baba', x))\r\n// eventBusService.on('baba', (x)=>console.log('Hello Baba Ji', x))\r\n// eventBusService.emit('baba', [5, 8, 11])\r\n// setTimeout(()=>{\r\n//     eventBusService.emit('baba', 17)\r\n// }, 2000)\r\n\r\n/* Listening Component...\r\n    import {eventBusService} from 'path...event-bus-service'\r\n    eventBusService.on('some-event', (dataFromEvent) => {\r\n    do something with dataFromEvent\r\n    })\r\n\r\n   Receiving Component...\r\n    eventBusService.emit('some-event', data)\r\n*/"],"mappings":"AAAA,SAASA,EAAE,CAACC,SAAS,EAAEC,QAAQ,EAAE;EAE7B,MAAMC,YAAY,GAAG,QAAgB;IAAA,IAAf;MAAEC;IAAO,CAAC;IAC5BF,QAAQ,CAACE,MAAM,CAAC;EACpB,CAAC;EAEDC,MAAM,CAACC,gBAAgB,CAACL,SAAS,EAAEE,YAAY,CAAC;EAEhD,OAAO,MAAM;IACTE,MAAM,CAACE,mBAAmB,CAACN,SAAS,EAAEE,YAAY,CAAC;EACvD,CAAC;AACL;AAEA,SAASK,IAAI,CAACP,SAAS,EAAEQ,IAAI,EAAE;EAC3BJ,MAAM,CAACK,aAAa,CAAC,IAAIC,WAAW,CAACV,SAAS,EAAE;IAAEG,MAAM,EAAEK;EAAK,CAAC,CAAC,CAAC;AACtE;AAEA,OAAO,MAAMG,eAAe,GAAG;EAAEZ,EAAE;EAAEQ;AAAK,CAAC;AAE3C,OAAO,SAASK,WAAW,CAACC,GAAG,EAAa;EAAA,IAAXC,IAAI,uEAAG,EAAE;EACtCH,eAAe,CAACJ,IAAI,CAAC,eAAe,EAAE;IAAEM,GAAG;IAAEC;EAAK,CAAC,CAAC;AACxD;AACA,OAAO,SAASC,cAAc,CAACF,GAAG,EAAE;EAChCD,WAAW,CAACC,GAAG,EAAE,SAAS,CAAC;AAC/B;AACA,OAAO,SAASG,YAAY,CAACH,GAAG,EAAE;EAC9BD,WAAW,CAACC,GAAG,EAAE,QAAQ,CAAC;AAC9B;AAIAT,MAAM,CAACa,KAAK,GAAGN,eAAe;AAC9BP,MAAM,CAACQ,WAAW,GAAGA,WAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}