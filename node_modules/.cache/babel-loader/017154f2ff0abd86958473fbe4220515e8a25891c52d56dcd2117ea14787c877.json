{"ast":null,"code":"var _jsxFileName = \"C:\\\\bloomin\\\\bloomin\\\\src\\\\cmps\\\\details-FAQ.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport faq from '../services/quastions.json';\nimport breaker from \"../assets/imgs/main/breaker1.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FAQ() {\n  _s();\n  const questions = faq;\n  const [openQuestionIds, setOpenQuestionIds] = useState([]);\n  const handleQuestionClick = questionId => {\n    if (openQuestionIds.includes(questionId)) {\n      setOpenQuestionIds(openQuestionIds.filter(id => id !== questionId));\n    } else {\n      setOpenQuestionIds([...openQuestionIds, questionId]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qa-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Frequently Asked Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: questions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"question\",\n          onClick: () => handleQuestionClick(question._id),\n          children: [openQuestionIds.includes(question._id) ? '-' : '+', \" \", question.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, this), openQuestionIds.includes(question._id) && /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => handleQuestionClick(question._id),\n          className: \"answer\",\n          children: question.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"breaker\",\n          src: breaker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this)]\n      }, question._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(FAQ, \"G7cWpsyswZ9cf2OVUevw+46Q/dE=\");\n_c = FAQ;\nvar _c;\n$RefreshReg$(_c, \"FAQ\");","map":{"version":3,"names":["React","useState","faq","breaker","FAQ","questions","openQuestionIds","setOpenQuestionIds","handleQuestionClick","questionId","includes","filter","id","map","question","_id","title","answer"],"sources":["C:/bloomin/bloomin/src/cmps/details-FAQ.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport faq from '../services/quastions.json'\r\nimport breaker from \"../assets/imgs/main/breaker1.png\"\r\n\r\nexport function FAQ() {\r\n\r\n  const questions = faq\r\n  const [openQuestionIds, setOpenQuestionIds] = useState([]);\r\n\r\n  const handleQuestionClick = (questionId) => {\r\n    if (openQuestionIds.includes(questionId)) {\r\n      setOpenQuestionIds(openQuestionIds.filter(id => id !== questionId));\r\n    } else {\r\n      setOpenQuestionIds([...openQuestionIds, questionId]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"qa-container\">\r\n      <h2>Frequently Asked Questions</h2>\r\n      <ul>\r\n        {questions.map((question) => (\r\n          <li key={question._id}>\r\n            <h3 className=\"question\" onClick={() => handleQuestionClick(question._id)}>\r\n            {openQuestionIds.includes(question._id) ? '-' : '+'} {question.title}\r\n            </h3>\r\n            {openQuestionIds.includes(question._id) && (\r\n              <p onClick={() => handleQuestionClick(question._id)} className=\"answer\" >{question.answer}</p>\r\n              )}\r\n              <img alt=\"breaker\" src={breaker} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,GAAG,MAAM,4BAA4B;AAC5C,OAAOC,OAAO,MAAM,kCAAkC;AAAA;AAEtD,OAAO,SAASC,GAAG,GAAG;EAAA;EAEpB,MAAMC,SAAS,GAAGH,GAAG;EACrB,MAAM,CAACI,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMO,mBAAmB,GAAIC,UAAU,IAAK;IAC1C,IAAIH,eAAe,CAACI,QAAQ,CAACD,UAAU,CAAC,EAAE;MACxCF,kBAAkB,CAACD,eAAe,CAACK,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAKH,UAAU,CAAC,CAAC;IACrE,CAAC,MAAM;MACLF,kBAAkB,CAAC,CAAC,GAAGD,eAAe,EAAEG,UAAU,CAAC,CAAC;IACtD;EACF,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,cAAc;IAAA,wBAC3B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmC,eACnC;MAAA,UACGJ,SAAS,CAACQ,GAAG,CAAEC,QAAQ,iBACtB;QAAA,wBACE;UAAI,SAAS,EAAC,UAAU;UAAC,OAAO,EAAE,MAAMN,mBAAmB,CAACM,QAAQ,CAACC,GAAG,CAAE;UAAA,WACzET,eAAe,CAACI,QAAQ,CAACI,QAAQ,CAACC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,OAAGD,QAAQ,CAACE,KAAK;QAAA;UAAA;UAAA;UAAA;QAAA,QAC/D,EACJV,eAAe,CAACI,QAAQ,CAACI,QAAQ,CAACC,GAAG,CAAC,iBACrC;UAAG,OAAO,EAAE,MAAMP,mBAAmB,CAACM,QAAQ,CAACC,GAAG,CAAE;UAAC,SAAS,EAAC,QAAQ;UAAA,UAAGD,QAAQ,CAACG;QAAM;UAAA;UAAA;UAAA;QAAA,QACxF,eACD;UAAK,GAAG,EAAC,SAAS;UAAC,GAAG,EAAEd;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA,GAP9BW,QAAQ,CAACC,GAAG;QAAA;QAAA;QAAA;MAAA,QAStB;IAAC;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV;AAAC,GA/BeX,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}